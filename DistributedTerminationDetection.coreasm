CoreASM TerminationDetection

use Standard
use StandardPlugins
use Signature
use MathPlugin
use TimePlugin

// Set number of Machines and Computation
derived MaxMachines = 3
derived MaxComputations = 2
derived supervisor = machineByID(0)

enum COLOUR = {black, white}
enum STATUS = {active, inactive}

universe MACHINE
universe COMPUTATION
universe TOKEN
universe Agents = {supervisorAgent, slaveAgent, environment}

function colour: MACHINE * COMPUTATION -> COLOUR
function status: MACHINE * COMPUTATION -> STATUS
function machineID: MACHINE -> NUMBER
function machineByID: NUMBER -> MACHINE
function nextMachine: MACHINE -> MACHINE
function computationID: COMPUTATION -> NUMBER
function tokenComputation: TOKEN -> COMPUTATION
function tokenColour: TOKEN -> COLOUR
function tokenMachine: TOKEN -> MACHINE

init initRule

rule initRule = {
	numMachines := 0
	numComputations := 0
	program(self) := @addMachines
}

/* ---------------------------------------
 	MACHINE RELATED INITIALIZATIONS
 */
 
rule addMachines = {
	// Create and initialize the states of the machines in the cluster
	if numMachines < MaxMachines then {
		extend MACHINE with m do {
			initializeMachine(m)
		}
	}
	else {
		// Link the machines in a circular fashion
		seqblock
		forall m in MACHINE do {
			if machineID(m) = (MaxMachines-1) then {
				nextMachine(m) := machineByID(0)
			}
			else {
				nextMachine(m) := machineByID(machineID(m)+1)
			}
		}
		
		// Next step is to initialize the computations on each machine
		program(self) := @addComputation
		endseqblock
	}
}

rule initializeMachine(m) = {
	seqblock
	machineID(m) := numMachines
	machineByID(numMachines) := m
	numMachines := numMachines + 1
	endseqblock
}


/* ---------------------------------------
 	COMPUTATION RELATED INITIALIZATIONS
 */

rule addComputation = {
	// Add computations to the set COMPUTATION
	if numComputations < MaxComputations then {
		extend COMPUTATION with c do {
			initializeComputation(c)
		}
	}
	else {
		program(self) := @addToken
	}
}

rule initializeComputation(c) = {
	
	seqblock
	computationID(c) := numComputations
	numComputations := numComputations + 1
	endseqblock
	
	forall m in MACHINE do {
		// Randomly assign machines status to computations
		if (randomvalue > 0.5) then {
			status(m, c) := active
		}
		else {
			status(m, c) := inactive
		}
		// Initialize the machine colours to white
		colour(m,c) := white
	}
}

/* ---------------------------------------
 	TOKEN RELATED INITIALIZATIONS
 */
 
 rule addToken = {
 	seqblock
 	forall c in COMPUTATION do {
 		extend TOKEN with t do {
 			initializeToken(t, c)
 		}
 	}
 	
 	program(self) := @initDetection
 	endseqblock
 }
 
 rule initializeToken(t, c) = {
	 tokenComputation(t) := c
	 tokenColour(t) := black
	 tokenMachine(t) := supervisor
 }
 
 /* ---------------------------------------
 	BEGIN DETECTION ALGORITHM
 */
 
 rule initDetection = {
 	program(supervisorAgent) := @supervisorRule
 	program(slaveAgent) := @slaveRule
 	program(environment) := @environmentRule
 	program(self) := undef
 }
 
 rule supervisorRule = {
 	// Process the tokens held by the supervisor
 	seqblock
 	forall t in TOKEN with (tokenMachine(t) = supervisor) do {
 		if status(supervisor, tokenComputation(t)) = inactive then {
 			// Black token detected, or supervisor is black... pass a new white token
 			if colour(supervisor, tokenComputation(t)) = black or tokenColour(t) = black then {
 				seqblock
 				print "SUPERVISOR: Self is Black or Black token received. Sending new White token for Computation " + computationID(tokenComputation(t))
 				tokenColour(t) := white
 				colour(supervisor, tokenComputation(t)) := white
 				forwardToken(t)
 				endseqblock
 			}
 		}
 		else {
 			print "SUPERVISOR: Currently processing job for Computation " + computationID(tokenComputation(t))
 		}
 	}
 	
 	// Detect termination
 	if forall t in TOKEN holds (tokenColour(t) = white and tokenMachine(t) = supervisor) then
 		seqblock
 		print "All White tokens received. Termination detected."
 		program(supervisorAgent) := undef
 		program(slaveAgent) := undef
 		program(environment) := undef
 		endseqblock
 	endseqblock
 	 
 }
 
 rule slaveRule = {
 	forall t in TOKEN with (tokenMachine(t) != supervisor) do {
 		if status(tokenMachine(t), tokenComputation(t)) = inactive then {
 			if colour(tokenMachine(t), tokenComputation(t)) = black then {
 				seqblock
 				print "Machine " + machineID(tokenMachine(t)) + " is Black. Token forwarded is now Black. Machine is now reset to White."
 				tokenColour(t) := black
 				colour(tokenMachine(t), tokenComputation(t)) := white
 				forwardToken(t)
 				endseqblock
 			}
 			else {
 				forwardToken(t)
 			}
 		}
 	}
 }
 
 rule forwardToken(t) = {
 	if tokenMachine(t) = supervisor then {
 		print "Token that is " + tokenColour(t) + " - forwarded from SUPERVISOR to Machine " + machineID(nextMachine(tokenMachine(t))) + " for Computation " + computationID(tokenComputation(t))
 	}
 	else if nextMachine(tokenMachine(t)) = supervisor then {
 		print "Token that is " + tokenColour(t) + " - forwarded from Machine " + machineID(tokenMachine(t)) + " to SUPERVISOR for Computation " + computationID(tokenComputation(t))
 	}
 	else {
 		print "Token that is " + tokenColour(t) + " - forwarded from Machine " + machineID(tokenMachine(t)) + " to Machine " + machineID(nextMachine(tokenMachine(t))) + " for Computation " + computationID(tokenComputation(t))
 	}
 	tokenMachine(t) := nextMachine(tokenMachine(t))
 }
 
 
  rule environmentRule = {
 	forall m in MACHINE do {
 		forall c in COMPUTATION do {
 			// Loop through all active machines...
 			if status(m, c) = active then {
 				// 30% chance to send a message to a random machine
 				if randomvalue <= 0.3 then {
 					let r = randMachine(m) in
 						sendMessage(m, r, c)
 				}
 				
 				// 50% chance of finishing job
 				if randomvalue <= 0.5 then {
 					status(m, c) := inactive
 				}
 			}
 		}
 	}
 }

 rule sendMessage(s, r, c) = {
 	seqblock
 		print "Machine " + machineID(s) + " messages Machine " + machineID(r) + " for Computation " + computationID(c) + ". Machine " + machineID(s) + " is now Black."
 		colour(s, c) := black
 		print "Machine " + machineID(r) + " is now active for Computation " + computationID(c)
 		if status(r, c) = inactive then status(r, c) := active
 	endseqblock
 }
 
 // Select a random machine (for sending a message)
 rule randMachine(curr) =
 	return r in
 		choose x in MACHINE with (machineID(x) != machineID(curr)) do
 			r := x
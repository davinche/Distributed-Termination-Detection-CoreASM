CoreASM TerminationDetection

use Standard
use StandardPlugins
use Signature
use MathPlugin
use TimePlugin

// Set number of Machines and Computation
derived MaxMachines = 5
derived MaxComputations = 3

enum COLOUR = {black, white}
enum STATUS = {active, inactive}
enum TOKENFORWARD = {idle, forward}

universe MACHINE
universe COMPUTATION
universe TOKEN
universe Agents = {supervisorAgent, slaveAgent, environment, observer}

function colour: MACHINE * COMPUTATION -> COLOUR
function status: MACHINE * COMPUTATION -> STATUS
function machineID: MACHINE -> NUMBER
function machineByID: NUMBER -> MACHINE
function nextMachine: MACHINE -> MACHINE
function computationID: COMPUTATION -> NUMBER
function tokenComputation: TOKEN -> COMPUTATION
function tokenColour: TOKEN -> COLOUR
function tokenMachine: TOKEN -> MACHINE
function tokenForwardSignal: TOKEN -> TOKENFORWARD

init initRule

rule initRule = {
	numMachines := 0
	numComputations := 0
	supervisor := undef
	program(self) := @addMachines
}

/* ---------------------------------------
 	MACHINE RELATED INITIALIZATIONS
 */
 
rule addMachines = {
	// Create and initialize the states of the machines in the cluster
	if numMachines < MaxMachines then {
		seqblock
		extend MACHINE with m do {
			initializeMachine(m)
		}
		numMachines := numMachines + 1
		endseqblock
	}
	else {
		supervisor := machineByID(0)
		// Link the machines in a circular fashion
		seqblock
		forall m in MACHINE do {
			seqblock
			if machineID(m) = (MaxMachines-1) then {
				nextMachine(m) := machineByID(0)
			}
			else {
				nextMachine(m) := machineByID(machineID(m)+1)
			}
			
			// print "Current Machine: " + machineID(m) + " Next Machine: " + machineID(nextMachine(m))
			endseqblock
		}
		
		// Next step is to initialize the computations on each machine
		program(self) := @addComputation
		endseqblock
	}
}

rule initializeMachine(m) = {
	machineID(m) := numMachines
	machineByID(numMachines) := m
}


/* ---------------------------------------
 	COMPUTATION RELATED INITIALIZATIONS
 */

rule addComputation = {
	// Add computations to the set COMPUTATION
	if numComputations < MaxComputations then {
		seqblock
		extend COMPUTATION with c do {
			initializeComputation(c)
		}
		numComputations := numComputations + 1
		endseqblock
	}
	else {
		program(self) := @addToken
	}
}

rule initializeComputation(c) = {
	computationID(c) := numComputations
	forall m in MACHINE do {
		seqblock
		// Randomly assign machines status to computations
		if (randomvalue > 0.5) then {
			status(m, c) := active
		}
		else {
			status(m, c) := inactive
		}
		// Initialize the machine colours to white
		colour(m,c) := white
		endseqblock
	}
}

/* ---------------------------------------
 	TOKEN RELATED INITIALIZATIONS
 */
 
 rule addToken = {
 	seqblock
 	forall c in COMPUTATION do {
 		extend TOKEN with t do {
 			initializeToken(t, c)
 		}
 	}
 	program(self) := @initDetection
 	endseqblock
 }
 
 rule initializeToken(t, c) = {
	 tokenComputation(t) := c
	 tokenColour(t) := black
	 tokenMachine(t) := supervisor
	 tokenForwardSignal(t) := idle
 }
 
 /* ---------------------------------------
 	BEGIN DETECTION ALGORITHM
 */
 
 rule initDetection = {
 	program(supervisorAgent) := @supervisorRule
 	program(slaveAgent) := @slaveRule
 	program(observer) := @observerRule
 	program(environment) := @environmentRule
 	program(self) := undef
 }
 
 rule supervisorRule = {
 	// Process the tokens held by the supervisor
 	forall t in TOKEN with (tokenMachine(t) = supervisor) do {
 		if status(supervisor, tokenComputation(t)) = inactive then {
 			// Black token detected, or supervisor is black... pass a new white token
 			if colour(supervisor, tokenComputation(t)) = black or tokenColour(t) = black then {
 				seqblock
 				tokenColour(t) := white
 				colour(supervisor, tokenComputation(t)) := white
 				tokenForwardSignal(t) := forward
 				endseqblock
 			}
 		}
 	}
 }
 
 rule slaveRule = {
 	forall t in TOKEN with (tokenMachine(t) != supervisor) do {
 		if status(tokenMachine(t), tokenComputation(t)) = inactive then {
 			seqblock
 			if colour(tokenMachine(t), tokenComputation(t)) = black then {
 				tokenColor(t) := black
 				colour(tokenMachine(t), tokenComputation(t)) := white
 			}
 			tokenForwardSignal(t) := forward
 			endseqblock
 		}
 	}
 }
 
 rule observerRule = {
 	forall t in TOKEN do {
 		// Currently processing... hold onto the token
 		if tokenForwardSignal(t) = idle then {
 			if tokenMachine(t) = supervisor then {
 				print "Supervisor processing Computation " + computationID(tokenComputation(t)) + "... holding onto token"
 			}
 			else {
 				print "Machine " + machineID(tokenMachine(t)) + " processing Computation " + computationID(tokenComputation(t)) + "... holding onto token"
 			}
 		}
 		
 		// Forward the tokens...
 		else {
 			if tokenMachine(t) = supervisor then {
 				print "SUPERVISOR: Self is black or black token detected. Forwarding new white token for Computation " + computationID(tokenComputation(t))
 			}
 			else {
 				print "Machine " + machineID(tokenMachine(t)) + " finished Computation " + computationID(tokenComputation(t)) + ". Forwarding token to Machine " + machineID(nextMachine(tokenMachine(t)))
 			}
 			forwardToken(t)
 		}
 	}
 }
 
 rule forwardToken(t) = {
 	tokenMachine(t) := nextMachine(tokenMachine(t))
 	tokenForwardSignal(t) := idle
 }
 
 
  rule environmentRule = {
 	forall m in MACHINE do {
 		forall c in COMPUTATION do {
 			// Loop through all active machines...
 			if status(m, c) = active then {
 				// 10% chance to send a message to a random machine
 				if randomvalue <= 0.1 then {
 					sendMessage(m, randMachine(m), c)
 				}
 				
 				// 50% chance of finishing job
 				if randomvalue <= 0.5 then {
 					status(m, c) := inactive
 				}
 			}
 		}
 	}
 }

 rule sendMessage(sender, receiver, compute) = {
 	seqblock
 		print "Machine " + machineID(sender) + " requested Machine " + machineID(receiver) + " to process a job for Computation " + computationID(compute)
 		status(receiver, compute) := active
 		print "Machine " + machineID(receiver) + " is now active for Computation " + computationID(compute)
 	endseqblock
 }
 
 // Select a random machine (for sending a message)
 rule randMachine(curr) =
 	return r in
 		choose x in MACHINE with (machineID(x) != machineID(curr)) do
 			r := x